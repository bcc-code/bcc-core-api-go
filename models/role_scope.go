// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RoleScope role scope
//
// swagger:model RoleScope
type RoleScope string

func NewRoleScope(value RoleScope) *RoleScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RoleScope.
func (m RoleScope) Pointer() *RoleScope {
	return &m
}

const (

	// RoleScopeGlobal captures enum value "Global"
	RoleScopeGlobal RoleScope = "Global"

	// RoleScopeOrg captures enum value "Org"
	RoleScopeOrg RoleScope = "Org"
)

// for schema
var roleScopeEnum []interface{}

func init() {
	var res []RoleScope
	if err := json.Unmarshal([]byte(`["Global","Org"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleScopeEnum = append(roleScopeEnum, v)
	}
}

func (m RoleScope) validateRoleScopeEnum(path, location string, value RoleScope) error {
	if err := validate.EnumCase(path, location, value, roleScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this role scope
func (m RoleScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRoleScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this role scope based on context it is used
func (m RoleScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
