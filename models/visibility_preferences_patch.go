// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VisibilityPreferencesPatch visibility preferences patch
//
// swagger:model VisibilityPreferencesPatch
type VisibilityPreferencesPatch struct {

	// birthday list
	BirthdayList bool `json:"birthdayList,omitempty"`

	// search
	Search SearchVisibility `json:"search,omitempty"`
}

// Validate validates this visibility preferences patch
func (m *VisibilityPreferencesPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisibilityPreferencesPatch) validateSearch(formats strfmt.Registry) error {
	if swag.IsZero(m.Search) { // not required
		return nil
	}

	if err := m.Search.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("search")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("search")
		}
		return err
	}

	return nil
}

// ContextValidate validate this visibility preferences patch based on the context it is used
func (m *VisibilityPreferencesPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisibilityPreferencesPatch) contextValidateSearch(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Search) { // not required
		return nil
	}

	if err := m.Search.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("search")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("search")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisibilityPreferencesPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisibilityPreferencesPatch) UnmarshalBinary(b []byte) error {
	var res VisibilityPreferencesPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
