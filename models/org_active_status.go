// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrgActiveStatus org active status
//
// swagger:model OrgActiveStatus
type OrgActiveStatus string

func NewOrgActiveStatus(value OrgActiveStatus) *OrgActiveStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrgActiveStatus.
func (m OrgActiveStatus) Pointer() *OrgActiveStatus {
	return &m
}

const (

	// OrgActiveStatusActive captures enum value "Active"
	OrgActiveStatusActive OrgActiveStatus = "Active"

	// OrgActiveStatusInactive captures enum value "Inactive"
	OrgActiveStatusInactive OrgActiveStatus = "Inactive"
)

// for schema
var orgActiveStatusEnum []interface{}

func init() {
	var res []OrgActiveStatus
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orgActiveStatusEnum = append(orgActiveStatusEnum, v)
	}
}

func (m OrgActiveStatus) validateOrgActiveStatusEnum(path, location string, value OrgActiveStatus) error {
	if err := validate.EnumCase(path, location, value, orgActiveStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this org active status
func (m OrgActiveStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrgActiveStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this org active status based on context it is used
func (m OrgActiveStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
