// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PersonRelationType person relation type
//
// swagger:model PersonRelationType
type PersonRelationType string

func NewPersonRelationType(value PersonRelationType) *PersonRelationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PersonRelationType.
func (m PersonRelationType) Pointer() *PersonRelationType {
	return &m
}

const (

	// PersonRelationTypeChild captures enum value "Child"
	PersonRelationTypeChild PersonRelationType = "Child"

	// PersonRelationTypeParent captures enum value "Parent"
	PersonRelationTypeParent PersonRelationType = "Parent"

	// PersonRelationTypeSpouse captures enum value "Spouse"
	PersonRelationTypeSpouse PersonRelationType = "Spouse"

	// PersonRelationTypeLegalDependent captures enum value "LegalDependent"
	PersonRelationTypeLegalDependent PersonRelationType = "LegalDependent"

	// PersonRelationTypeLegalGuardian captures enum value "LegalGuardian"
	PersonRelationTypeLegalGuardian PersonRelationType = "LegalGuardian"

	// PersonRelationTypeFosterChild captures enum value "FosterChild"
	PersonRelationTypeFosterChild PersonRelationType = "FosterChild"

	// PersonRelationTypeFosterParent captures enum value "FosterParent"
	PersonRelationTypeFosterParent PersonRelationType = "FosterParent"

	// PersonRelationTypeContactDependent captures enum value "ContactDependent"
	PersonRelationTypeContactDependent PersonRelationType = "ContactDependent"

	// PersonRelationTypeContactPerson captures enum value "ContactPerson"
	PersonRelationTypeContactPerson PersonRelationType = "ContactPerson"
)

// for schema
var personRelationTypeEnum []interface{}

func init() {
	var res []PersonRelationType
	if err := json.Unmarshal([]byte(`["Child","Parent","Spouse","LegalDependent","LegalGuardian","FosterChild","FosterParent","ContactDependent","ContactPerson"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		personRelationTypeEnum = append(personRelationTypeEnum, v)
	}
}

func (m PersonRelationType) validatePersonRelationTypeEnum(path, location string, value PersonRelationType) error {
	if err := validate.EnumCase(path, location, value, personRelationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this person relation type
func (m PersonRelationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePersonRelationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this person relation type based on context it is used
func (m PersonRelationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
