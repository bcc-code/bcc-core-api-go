// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AffiliationType affiliation type
//
// swagger:model AffiliationType
type AffiliationType string

func NewAffiliationType(value AffiliationType) *AffiliationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AffiliationType.
func (m AffiliationType) Pointer() *AffiliationType {
	return &m
}

const (

	// AffiliationTypeMember captures enum value "Member"
	AffiliationTypeMember AffiliationType = "Member"

	// AffiliationTypeAffiliate captures enum value "Affiliate"
	AffiliationTypeAffiliate AffiliationType = "Affiliate"

	// AffiliationTypeParticipant captures enum value "Participant"
	AffiliationTypeParticipant AffiliationType = "Participant"
)

// for schema
var affiliationTypeEnum []interface{}

func init() {
	var res []AffiliationType
	if err := json.Unmarshal([]byte(`["Member","Affiliate","Participant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		affiliationTypeEnum = append(affiliationTypeEnum, v)
	}
}

func (m AffiliationType) validateAffiliationTypeEnum(path, location string, value AffiliationType) error {
	if err := validate.EnumCase(path, location, value, affiliationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this affiliation type
func (m AffiliationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAffiliationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this affiliation type based on context it is used
func (m AffiliationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
