// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RelationType relation type
//
// swagger:model RelationType
type RelationType string

func NewRelationType(value RelationType) *RelationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RelationType.
func (m RelationType) Pointer() *RelationType {
	return &m
}

const (

	// RelationTypeChildOf captures enum value "ChildOf"
	RelationTypeChildOf RelationType = "ChildOf"

	// RelationTypeSpouseOf captures enum value "SpouseOf"
	RelationTypeSpouseOf RelationType = "SpouseOf"

	// RelationTypeLegalDependentOf captures enum value "LegalDependentOf"
	RelationTypeLegalDependentOf RelationType = "LegalDependentOf"

	// RelationTypeFosterChildOf captures enum value "FosterChildOf"
	RelationTypeFosterChildOf RelationType = "FosterChildOf"

	// RelationTypeContactDependentOf captures enum value "ContactDependentOf"
	RelationTypeContactDependentOf RelationType = "ContactDependentOf"
)

// for schema
var relationTypeEnum []interface{}

func init() {
	var res []RelationType
	if err := json.Unmarshal([]byte(`["ChildOf","SpouseOf","LegalDependentOf","FosterChildOf","ContactDependentOf"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relationTypeEnum = append(relationTypeEnum, v)
	}
}

func (m RelationType) validateRelationTypeEnum(path, location string, value RelationType) error {
	if err := validate.EnumCase(path, location, value, relationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this relation type
func (m RelationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRelationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this relation type based on context it is used
func (m RelationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
