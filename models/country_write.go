// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CountryWrite country write
//
// swagger:model CountryWrite
type CountryWrite struct {

	// iso2 code
	// Required: true
	Iso2Code *string `json:"iso2Code"`

	// name en
	// Required: true
	// Max Length: 255
	NameEn *string `json:"nameEn"`

	// name native
	// Required: true
	// Max Length: 255
	NameNative *string `json:"nameNative"`

	// name no
	// Required: true
	// Max Length: 255
	NameNo *string `json:"nameNo"`
}

// Validate validates this country write
func (m *CountryWrite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIso2Code(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameEn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameNative(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameNo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CountryWrite) validateIso2Code(formats strfmt.Registry) error {

	if err := validate.Required("iso2Code", "body", m.Iso2Code); err != nil {
		return err
	}

	return nil
}

func (m *CountryWrite) validateNameEn(formats strfmt.Registry) error {

	if err := validate.Required("nameEn", "body", m.NameEn); err != nil {
		return err
	}

	if err := validate.MaxLength("nameEn", "body", *m.NameEn, 255); err != nil {
		return err
	}

	return nil
}

func (m *CountryWrite) validateNameNative(formats strfmt.Registry) error {

	if err := validate.Required("nameNative", "body", m.NameNative); err != nil {
		return err
	}

	if err := validate.MaxLength("nameNative", "body", *m.NameNative, 255); err != nil {
		return err
	}

	return nil
}

func (m *CountryWrite) validateNameNo(formats strfmt.Registry) error {

	if err := validate.Required("nameNo", "body", m.NameNo); err != nil {
		return err
	}

	if err := validate.MaxLength("nameNo", "body", *m.NameNo, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this country write based on context it is used
func (m *CountryWrite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CountryWrite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CountryWrite) UnmarshalBinary(b []byte) error {
	var res CountryWrite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
