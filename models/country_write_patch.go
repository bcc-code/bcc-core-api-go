// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CountryWritePatch country write patch
//
// swagger:model CountryWritePatch
type CountryWritePatch struct {

	// iso2 code
	Iso2Code string `json:"iso2Code,omitempty"`

	// name en
	// Max Length: 255
	NameEn string `json:"nameEn,omitempty"`

	// name native
	// Max Length: 255
	NameNative string `json:"nameNative,omitempty"`

	// name no
	// Max Length: 255
	NameNo string `json:"nameNo,omitempty"`
}

// Validate validates this country write patch
func (m *CountryWritePatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameEn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameNative(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameNo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CountryWritePatch) validateNameEn(formats strfmt.Registry) error {
	if swag.IsZero(m.NameEn) { // not required
		return nil
	}

	if err := validate.MaxLength("nameEn", "body", m.NameEn, 255); err != nil {
		return err
	}

	return nil
}

func (m *CountryWritePatch) validateNameNative(formats strfmt.Registry) error {
	if swag.IsZero(m.NameNative) { // not required
		return nil
	}

	if err := validate.MaxLength("nameNative", "body", m.NameNative, 255); err != nil {
		return err
	}

	return nil
}

func (m *CountryWritePatch) validateNameNo(formats strfmt.Registry) error {
	if swag.IsZero(m.NameNo) { // not required
		return nil
	}

	if err := validate.MaxLength("nameNo", "body", m.NameNo, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this country write patch based on context it is used
func (m *CountryWritePatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CountryWritePatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CountryWritePatch) UnmarshalBinary(b []byte) error {
	var res CountryWritePatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
