// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsentWritePatch consent write patch
//
// swagger:model ConsentWritePatch
type ConsentWritePatch struct {

	// org Uid
	// Format: uuid
	OrgUID strfmt.UUID `json:"orgUid,omitempty"`

	// person Uid
	// Format: uuid
	PersonUID strfmt.UUID `json:"personUid,omitempty"`

	// purpose
	Purpose ConsentPurpose `json:"purpose,omitempty"`

	// valid from
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	// valid to
	// Format: date-time
	ValidTo *strfmt.DateTime `json:"validTo,omitempty"`
}

// Validate validates this consent write patch
func (m *ConsentWritePatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrgUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsentWritePatch) validateOrgUID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgUID) { // not required
		return nil
	}

	if err := validate.FormatOf("orgUid", "body", "uuid", m.OrgUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsentWritePatch) validatePersonUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonUID) { // not required
		return nil
	}

	if err := validate.FormatOf("personUid", "body", "uuid", m.PersonUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsentWritePatch) validatePurpose(formats strfmt.Registry) error {
	if swag.IsZero(m.Purpose) { // not required
		return nil
	}

	if err := m.Purpose.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("purpose")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("purpose")
		}
		return err
	}

	return nil
}

func (m *ConsentWritePatch) validateValidFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsentWritePatch) validateValidTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("validTo", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this consent write patch based on the context it is used
func (m *ConsentWritePatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePurpose(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsentWritePatch) contextValidatePurpose(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Purpose) { // not required
		return nil
	}

	if err := m.Purpose.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("purpose")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("purpose")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsentWritePatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsentWritePatch) UnmarshalBinary(b []byte) error {
	var res ConsentWritePatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
