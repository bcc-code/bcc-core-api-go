// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleAssignmentWrite role assignment write
//
// swagger:model RoleAssignmentWrite
type RoleAssignmentWrite struct {

	// org Uid
	// Format: uuid
	OrgUID strfmt.UUID `json:"orgUid,omitempty"`

	// person Uid
	// Required: true
	// Format: uuid
	PersonUID *strfmt.UUID `json:"personUid"`

	// role Uid
	// Required: true
	// Format: uuid
	RoleUID *strfmt.UUID `json:"roleUid"`

	// valid from
	// Required: true
	// Format: date-time
	ValidFrom *strfmt.DateTime `json:"validFrom"`

	// valid to
	// Format: date-time
	ValidTo *strfmt.DateTime `json:"validTo,omitempty"`
}

// Validate validates this role assignment write
func (m *RoleAssignmentWrite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrgUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleAssignmentWrite) validateOrgUID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgUID) { // not required
		return nil
	}

	if err := validate.FormatOf("orgUid", "body", "uuid", m.OrgUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RoleAssignmentWrite) validatePersonUID(formats strfmt.Registry) error {

	if err := validate.Required("personUid", "body", m.PersonUID); err != nil {
		return err
	}

	if err := validate.FormatOf("personUid", "body", "uuid", m.PersonUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RoleAssignmentWrite) validateRoleUID(formats strfmt.Registry) error {

	if err := validate.Required("roleUid", "body", m.RoleUID); err != nil {
		return err
	}

	if err := validate.FormatOf("roleUid", "body", "uuid", m.RoleUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RoleAssignmentWrite) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("validFrom", "body", m.ValidFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RoleAssignmentWrite) validateValidTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("validTo", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role assignment write based on context it is used
func (m *RoleAssignmentWrite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoleAssignmentWrite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleAssignmentWrite) UnmarshalBinary(b []byte) error {
	var res RoleAssignmentWrite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
