// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrgType org type
//
// swagger:model OrgType
type OrgType string

func NewOrgType(value OrgType) *OrgType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrgType.
func (m OrgType) Pointer() *OrgType {
	return &m
}

const (

	// OrgTypeChurch captures enum value "Church"
	OrgTypeChurch OrgType = "Church"

	// OrgTypeClub captures enum value "Club"
	OrgTypeClub OrgType = "Club"

	// OrgTypeOrg captures enum value "Org"
	OrgTypeOrg OrgType = "Org"
)

// for schema
var orgTypeEnum []interface{}

func init() {
	var res []OrgType
	if err := json.Unmarshal([]byte(`["Church","Club","Org"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orgTypeEnum = append(orgTypeEnum, v)
	}
}

func (m OrgType) validateOrgTypeEnum(path, location string, value OrgType) error {
	if err := validate.EnumCase(path, location, value, orgTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this org type
func (m OrgType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrgTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this org type based on context it is used
func (m OrgType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
