// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupMember group member
//
// swagger:model GroupMember
type GroupMember struct {

	// group Uid
	// Required: true
	// Format: uuid
	GroupUID *strfmt.UUID `json:"groupUid"`

	// last changed date
	// Format: date-time
	LastChangedDate strfmt.DateTime `json:"lastChangedDate,omitempty"`

	// person
	Person *Person `json:"person,omitempty"`

	// person Uid
	// Required: true
	PersonUID *string `json:"personUid"`

	// uid
	// Required: true
	// Format: uuid
	UID *strfmt.UUID `json:"uid"`
}

// Validate validates this group member
func (m *GroupMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupMember) validateGroupUID(formats strfmt.Registry) error {

	if err := validate.Required("groupUid", "body", m.GroupUID); err != nil {
		return err
	}

	if err := validate.FormatOf("groupUid", "body", "uuid", m.GroupUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupMember) validateLastChangedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastChangedDate", "body", "date-time", m.LastChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupMember) validatePerson(formats strfmt.Registry) error {
	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *GroupMember) validatePersonUID(formats strfmt.Registry) error {

	if err := validate.Required("personUid", "body", m.PersonUID); err != nil {
		return err
	}

	return nil
}

func (m *GroupMember) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	if err := validate.FormatOf("uid", "body", "uuid", m.UID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this group member based on the context it is used
func (m *GroupMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupMember) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if swag.IsZero(m.Person) { // not required
			return nil
		}

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupMember) UnmarshalBinary(b []byte) error {
	var res GroupMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
