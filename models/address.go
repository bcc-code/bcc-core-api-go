// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address address
//
// swagger:model Address
type Address struct {

	// address1
	// Max Length: 255
	Address1 string `json:"address1,omitempty"`

	// address2
	// Max Length: 255
	Address2 string `json:"address2,omitempty"`

	// address3
	// Max Length: 255
	Address3 string `json:"address3,omitempty"`

	// city
	// Max Length: 255
	City string `json:"city,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// postal code
	// Max Length: 255
	PostalCode string `json:"postalCode,omitempty"`

	// region
	// Max Length: 255
	Region string `json:"region,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("address1", "body", m.Address1, 255); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("address2", "body", m.Address2, 255); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddress3(formats strfmt.Registry) error {
	if swag.IsZero(m.Address3) { // not required
		return nil
	}

	if err := validate.MaxLength("address3", "body", m.Address3, 255); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateCity(formats strfmt.Registry) error {
	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", m.City, 255); err != nil {
		return err
	}

	return nil
}

func (m *Address) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postalCode", "body", m.PostalCode, 255); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if err := validate.MaxLength("region", "body", m.Region, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
