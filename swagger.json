{
    "swagger": "2.0",
    "info": {
        "description": "This is the Core API",
        "title": "BCC Core API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.1"
    },
    "paths": {
        "/affiliations": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.affiliations#read"
                        ]
                    }
                ],
                "description": "You need the affiliations#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "affiliations"
                ],
                "summary": "Get affiliation",
                "operationId": "FindAffiliations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Affiliation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.affiliations#write"
                        ]
                    }
                ],
                "description": "You need the affiliations#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "affiliations"
                ],
                "summary": "Create affiliation",
                "operationId": "CreateAffiliation",
                "parameters": [
                    {
                        "description": "Affiliation",
                        "name": "affiliation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AffiliationWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Affiliation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/affiliations/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.affiliations#read"
                        ]
                    }
                ],
                "description": "You need the affiliations#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "affiliations"
                ],
                "summary": "Get affiliation",
                "operationId": "GetAffiliation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Affiliation Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Affiliation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.affiliations#write"
                        ]
                    }
                ],
                "description": "You need the affiliations#write scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "affiliations"
                ],
                "summary": "Remove affiliation",
                "operationId": "RemoveAffiliation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Affiliation Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Affiliation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.affiliations#write"
                        ]
                    }
                ],
                "description": "You need the affiliations#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "affiliations"
                ],
                "summary": "Patch affiliation",
                "operationId": "PatchAffiliation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Affiliation Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Affiliation",
                        "name": "affiliation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AffiliationWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Affiliation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/consents": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the consents#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "consents"
                ],
                "summary": "Find consents",
                "operationId": "FindConsents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Consent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#write"
                        ]
                    }
                ],
                "description": "You need the consents#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "consents"
                ],
                "summary": "Create consent",
                "operationId": "CreateConsent",
                "parameters": [
                    {
                        "description": "Consent",
                        "name": "consent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConsentWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consent",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Consent"
                        }
                    },
                    "400": {
                        "description": "ErrorData",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "ErrorData",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/consents/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the consents#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "consents"
                ],
                "summary": "Get consent",
                "operationId": "GetConsent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Consent Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Consent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#write"
                        ]
                    }
                ],
                "description": "You need the consents#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "consents"
                ],
                "summary": "Patch consent",
                "operationId": "PatchConsent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Consent Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "consentData",
                        "name": "consent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConsentWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Consent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "countries#read"
                        ]
                    }
                ],
                "description": "You need the countries#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "summary": "Find country",
                "operationId": "FindCountries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Country"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "countries#write"
                        ]
                    }
                ],
                "description": "You need the countries#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "summary": "Create country",
                "operationId": "CreateCountry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Country Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Country",
                        "name": "country",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountryWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Country"
                        }
                    },
                    "400": {
                        "description": "ErrorData",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "ErrorData",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/countries/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "countries#read"
                        ]
                    }
                ],
                "description": "You need the countries#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "summary": "Get country",
                "operationId": "GetCountry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Country Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Country"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "countries#write"
                        ]
                    }
                ],
                "description": "You need the countries#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "summary": "Patch country",
                "operationId": "PatchCountry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Country Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Country",
                        "name": "country",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountryWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Country"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "groups#read"
                        ]
                    }
                ],
                "description": "You need the groups#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Find group",
                "operationId": "FindGroups",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "groups#write"
                        ]
                    }
                ],
                "description": "You need the groups#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Create group",
                "operationId": "CreateGroup",
                "parameters": [
                    {
                        "description": "Group",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/groups/{groupUid}/members": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.groups#read"
                        ]
                    }
                ],
                "description": "You need the groups#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groupMembers"
                ],
                "summary": "Find a group member",
                "operationId": "FindGroupMembers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_GroupMember"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.groups#write"
                        ]
                    }
                ],
                "description": "You need the groups#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groupMembers"
                ],
                "summary": "Create a group member",
                "operationId": "CreateGroupMember",
                "parameters": [
                    {
                        "description": "GroupMember",
                        "name": "groupMember",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupMemberWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-GroupMember"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/groups/{groupUid}/members/{memberUid}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.groups#read"
                        ]
                    }
                ],
                "description": "You need the groups#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groupMembers"
                ],
                "summary": "Get group members",
                "operationId": "GetGroupMember",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupMember Id",
                        "name": "memberUid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-GroupMember"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.groups#write"
                        ]
                    }
                ],
                "description": "You need the groups#write scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groupMembers"
                ],
                "summary": "Remove a group member",
                "operationId": "RemoveGroupMember",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupMember Id",
                        "name": "memberUid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-GroupMember"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "groups#read"
                        ]
                    }
                ],
                "description": "You need the groups#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get group",
                "operationId": "GetGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Uid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ClientCredentials": [
                            "groups#write"
                        ]
                    }
                ],
                "description": "You need the groups#write scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Remove group",
                "operationId": "RemoveGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "groups#write"
                        ]
                    }
                ],
                "description": "You need the groups#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Patch group",
                "operationId": "PatchGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Group"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/relations": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the relations#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Find relations",
                "operationId": "FindRelations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Relation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the relations#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Create relation",
                "operationId": "CreateRelation",
                "parameters": [
                    {
                        "description": "Relation",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelationWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Relation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/relations/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the relations#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Get relation",
                "operationId": "GetRelation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relation Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Relation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "consents#read"
                        ]
                    }
                ],
                "description": "You need the relations#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Patch relation",
                "operationId": "PatchRelation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relation Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Relation",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelationWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Relation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/roleAssignments": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.persons.role_assignments#read"
                        ]
                    }
                ],
                "description": "You need the persons.role_assignments#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roleAssignments"
                ],
                "summary": "Get role assignment",
                "operationId": "FindRoleAssignments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_RoleAssignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.persons.role_assignments#write"
                        ]
                    }
                ],
                "description": "You need the persons.role_assignments#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roleAssignments"
                ],
                "summary": "Create role assignment",
                "operationId": "CreateRoleAssignment",
                "parameters": [
                    {
                        "description": "RoleAssignment",
                        "name": "roleAssignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleAssignmentWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-RoleAssignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/roleAssignments/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.role_assignments#read"
                        ]
                    }
                ],
                "description": "You need the persons.role_assignments#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roleAssignments"
                ],
                "summary": "Get role assignment",
                "operationId": "GetRoleAssignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RoleAssignment Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-RoleAssignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.persons.role_assignments#write"
                        ]
                    }
                ],
                "description": "You need the persons.role_assignments#write scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roleAssignments"
                ],
                "summary": "Remove role assignment",
                "operationId": "RemoveRoleAssignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RoleAssignment Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-RoleAssignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.persons.role_assignments#write"
                        ]
                    }
                ],
                "description": "You need the persons.role_assignments#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roleAssignments"
                ],
                "summary": "Patch role assignment",
                "operationId": "PatchRoleAssignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RoleAssignment Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RoleAssignment",
                        "name": "roleAssignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleAssignmentWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-RoleAssignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "roles#read"
                        ]
                    }
                ],
                "description": "You need the roles#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Find role",
                "operationId": "FindRoles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "roles#write"
                        ]
                    }
                ],
                "description": "You need the roles#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Create role",
                "operationId": "CreateRole",
                "parameters": [
                    {
                        "description": "Role",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "roles#read"
                        ]
                    }
                ],
                "description": "You need the roles#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role",
                "operationId": "GetRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/v2/orgs": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "orgs#read"
                        ]
                    }
                ],
                "description": "You need the orgs#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orgs"
                ],
                "summary": "Find org",
                "operationId": "FindOrgs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "orgs#write"
                        ]
                    }
                ],
                "description": "You need the orgs#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orgs"
                ],
                "summary": "Create org",
                "operationId": "CreateOrg",
                "parameters": [
                    {
                        "description": "Org",
                        "name": "org",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrgWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/v2/orgs/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "orgs#read"
                        ]
                    }
                ],
                "description": "You need the orgs#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orgs"
                ],
                "summary": "Get org",
                "operationId": "GetOrg",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "orgs#write"
                        ]
                    }
                ],
                "description": "You need the orgs#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orgs"
                ],
                "summary": "Patch org",
                "operationId": "PatchOrg",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Org",
                        "name": "org",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrgWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/v2/persons": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons#read",
                            "persons.gender#read",
                            "persons.birth_date#read",
                            "persons.deceased_date#read",
                            "persons.name#read",
                            "persons.address#read",
                            "persons.email#read",
                            "persons.phone#read",
                            "persons.national_ids#read"
                        ]
                    }
                ],
                "description": "You need the persons#read scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Find person",
                "operationId": "FindPersons",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WrappedWithMeta-array_Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons#write"
                        ]
                    }
                ],
                "description": "You need the persons#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Create person",
                "operationId": "CreatePersons",
                "parameters": [
                    {
                        "description": "Person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PersonWrite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/v2/persons/personID/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons.person_id#read"
                        ]
                    }
                ],
                "description": "Lookup person id by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Get personID",
                "operationId": "GetPersonID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person Uid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-int"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        },
        "/v2/persons/{id}": {
            "get": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons#read",
                            "persons.gender#read",
                            "persons.birth_date#read",
                            "persons.deceased_date#read",
                            "persons.name#read",
                            "persons.address#read",
                            "persons.email#read",
                            "persons.phone#read",
                            "persons.national_ids#read"
                        ]
                    }
                ],
                "description": "Person retrieval is permitted through the use of scopes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Get person",
                "operationId": "GetPerson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields to select",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Options",
                        "name": "options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons#write"
                        ]
                    }
                ],
                "description": "You need the persons#write scope to access this endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Remove person",
                "operationId": "RemovePerson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ClientCredentials": [
                            "persons#write"
                        ]
                    }
                ],
                "description": "You need the persons#write scope to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Patch person",
                "operationId": "PatchPerson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PersonWritePatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Wrapped-Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorData"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Address": {
            "type": "object",
            "properties": {
                "address1": {
                    "type": "string",
                    "maxLength": 255
                },
                "address2": {
                    "type": "string",
                    "maxLength": 255
                },
                "address3": {
                    "type": "string",
                    "maxLength": 255
                },
                "city": {
                    "type": "string",
                    "maxLength": 255
                },
                "countryCode": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string",
                    "maxLength": 255
                },
                "region": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "Affiliation": {
            "type": "object",
            "required": [
                "lastChangedDate",
                "orgUid",
                "personUid",
                "type",
                "uid",
                "validFrom"
            ],
            "properties": {
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "org": {
                    "$ref": "#/definitions/Org"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "person": {
                    "$ref": "#/definitions/Person"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/AffiliationType"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "AffiliationType": {
            "type": "string",
            "enum": [
                "Member",
                "Affiliate",
                "Participant"
            ]
        },
        "AffiliationWrite": {
            "type": "object",
            "required": [
                "orgUid",
                "personUid",
                "type",
                "validFrom"
            ],
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/AffiliationType"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "AffiliationWritePatch": {
            "type": "object",
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/AffiliationType"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "Consent": {
            "type": "object",
            "required": [
                "lastChangedDate",
                "orgUid",
                "personUid",
                "purpose",
                "uid",
                "validFrom"
            ],
            "properties": {
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "org": {
                    "$ref": "#/definitions/Org"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "person": {
                    "$ref": "#/definitions/Person"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "purpose": {
                    "$ref": "#/definitions/ConsentPurpose"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "ConsentPurpose": {
            "type": "string",
            "enum": [
                "DataSharing",
                "Tracking"
            ]
        },
        "ConsentWrite": {
            "type": "object",
            "required": [
                "orgUid",
                "personUid",
                "purpose",
                "validFrom"
            ],
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "purpose": {
                    "$ref": "#/definitions/ConsentPurpose"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "ConsentWritePatch": {
            "type": "object",
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "purpose": {
                    "$ref": "#/definitions/ConsentPurpose"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "Country": {
            "type": "object",
            "required": [
                "iso2Code",
                "lastChangedDate",
                "nameEn",
                "nameNative",
                "nameNo",
                "uid"
            ],
            "properties": {
                "iso2Code": {
                    "type": "string"
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "nameEn": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNative": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNo": {
                    "type": "string",
                    "maxLength": 255
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "CountryWrite": {
            "type": "object",
            "required": [
                "iso2Code",
                "nameEn",
                "nameNative",
                "nameNo"
            ],
            "properties": {
                "iso2Code": {
                    "type": "string"
                },
                "nameEn": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNative": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNo": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "CountryWritePatch": {
            "type": "object",
            "properties": {
                "iso2Code": {
                    "type": "string"
                },
                "nameEn": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNative": {
                    "type": "string",
                    "maxLength": 255
                },
                "nameNo": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "ErrorCode": {
            "type": "string",
            "enum": [
                "not-found",
                "invalid-query",
                "invalid-body",
                "invalid-key-reference",
                "duplicate-unique-key",
                "cannot-parse-token",
                "invalid-token",
                "missing-scopes",
                "internal-error",
                "unauthorized",
                "invalid-app-uid"
            ]
        },
        "ErrorData": {
            "type": "object",
            "required": [
                "error"
            ],
            "properties": {
                "error": {
                    "$ref": "#/definitions/ErrorDetails"
                }
            }
        },
        "ErrorDetails": {
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "$ref": "#/definitions/ErrorCode"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Gender": {
            "type": "string",
            "enum": [
                "Male",
                "Female",
                "Unknown"
            ]
        },
        "GrantType": {
            "type": "string",
            "enum": [
                "Default",
                "View",
                "Administrate",
                "Represent",
                "None"
            ]
        },
        "Group": {
            "type": "object",
            "required": [
                "appUid",
                "lastChangedDate",
                "name",
                "type",
                "uid"
            ],
            "properties": {
                "appUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "rule": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/GroupType"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "GroupMember": {
            "type": "object",
            "required": [
                "groupUid",
                "personUid",
                "uid"
            ],
            "properties": {
                "groupUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "person": {
                    "$ref": "#/definitions/Person"
                },
                "personUid": {
                    "type": "string"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "GroupMemberWrite": {
            "type": "object",
            "required": [
                "personUid"
            ],
            "properties": {
                "personUid": {
                    "type": "string"
                }
            }
        },
        "GroupType": {
            "type": "string",
            "enum": [
                "Static",
                "Dynamic"
            ]
        },
        "GroupWrite": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "rule": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/GroupType"
                }
            }
        },
        "GroupWritePatch": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "rule": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/GroupType"
                }
            }
        },
        "MaritalStatus": {
            "type": "string",
            "enum": [
                "Single",
                "Married",
                "Widowed",
                "Separated",
                "SingleParent",
                "Unknown"
            ]
        },
        "Metadata": {
            "type": "object",
            "required": [
                "limit",
                "skipped",
                "total"
            ],
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "skipped": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "NationalId": {
            "type": "object",
            "required": [
                "countryIso2Code",
                "id"
            ],
            "properties": {
                "countryIso2Code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "Org": {
            "type": "object",
            "required": [
                "activeStatus",
                "districtName",
                "lastChangedDate",
                "name",
                "orgID",
                "type",
                "uid"
            ],
            "properties": {
                "activeStatus": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgActiveStatus"
                        }
                    ]
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "districtName": {
                    "type": "string",
                    "maxLength": 255
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "orgID": {
                    "type": "integer"
                },
                "postalAddress": {
                    "$ref": "#/definitions/Address"
                },
                "type": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgType"
                        }
                    ]
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                },
                "visitingAddress": {
                    "$ref": "#/definitions/Address"
                }
            }
        },
        "OrgActiveStatus": {
            "type": "string",
            "enum": [
                "Active",
                "Inactive"
            ]
        },
        "OrgType": {
            "type": "string",
            "enum": [
                "Church",
                "Club",
                "Org"
            ]
        },
        "OrgWrite": {
            "type": "object",
            "required": [
                "activeStatus",
                "districtName",
                "name",
                "type"
            ],
            "properties": {
                "activeStatus": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgActiveStatus"
                        }
                    ]
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "districtName": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "postalAddress": {
                    "$ref": "#/definitions/Address"
                },
                "type": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgType"
                        }
                    ]
                },
                "visitingAddress": {
                    "$ref": "#/definitions/Address"
                }
            }
        },
        "OrgWritePatch": {
            "type": "object",
            "properties": {
                "activeStatus": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgActiveStatus"
                        }
                    ]
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "districtName": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "postalAddress": {
                    "$ref": "#/definitions/Address"
                },
                "type": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/OrgType"
                        }
                    ]
                },
                "visitingAddress": {
                    "$ref": "#/definitions/Address"
                }
            }
        },
        "Person": {
            "type": "object",
            "required": [
                "birthDate",
                "displayName",
                "firstName",
                "gender",
                "lastChangedDate",
                "lastName",
                "maritalStatus",
                "personID",
                "uid"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "affiliations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Affiliation"
                    }
                },
                "birthDate": {
                    "type": "string",
                    "format": "date"
                },
                "cellPhone": {
                    "type": "string"
                },
                "cellPhoneVerified": {
                    "type": "boolean"
                },
                "consents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Consent"
                    }
                },
                "deceasedDate": {
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 255
                },
                "gender": {
                    "$ref": "#/definitions/Gender"
                },
                "homePhone": {
                    "type": "string"
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 255
                },
                "maritalStatus": {
                    "$ref": "#/definitions/MaritalStatus"
                },
                "middleName": {
                    "type": "string",
                    "maxLength": 255
                },
                "nationalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NationalId"
                    }
                },
                "personID": {
                    "type": "integer"
                },
                "preferences": {
                    "$ref": "#/definitions/Preferences"
                },
                "profilePicture": {
                    "description": "URL of person's profile picture",
                    "type": "string",
                    "maxLength": 512
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonRelation"
                    }
                },
                "roleAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleAssignment"
                    }
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "PersonRelation": {
            "type": "object",
            "required": [
                "grantToOrigin",
                "grantToTarget",
                "targetUid",
                "type",
                "validFrom"
            ],
            "properties": {
                "grantToOrigin": {
                    "description": "Permission of target on origin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "grantToTarget": {
                    "description": "Permission of origin on target",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "target": {
                    "$ref": "#/definitions/Person"
                },
                "targetUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "Type of relation, defined as {target} is {type} of {origin}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/PersonRelationType"
                        }
                    ]
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "PersonRelationType": {
            "type": "string",
            "enum": [
                "Child",
                "Parent",
                "Spouse",
                "LegalDependent",
                "LegalGuardian",
                "FosterChild",
                "FosterParent",
                "ContactDependent",
                "ContactPerson"
            ]
        },
        "PersonWrite": {
            "type": "object",
            "required": [
                "birthDate",
                "displayName",
                "firstName",
                "gender",
                "lastName",
                "maritalStatus"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date"
                },
                "cellPhone": {
                    "type": "string"
                },
                "cellPhoneVerified": {
                    "type": "boolean"
                },
                "deceasedDate": {
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 255
                },
                "gender": {
                    "$ref": "#/definitions/Gender"
                },
                "homePhone": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 255
                },
                "maritalStatus": {
                    "$ref": "#/definitions/MaritalStatus"
                },
                "middleName": {
                    "type": "string",
                    "maxLength": 255
                },
                "nationalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NationalId"
                    }
                },
                "preferences": {
                    "$ref": "#/definitions/Preferences"
                },
                "profilePicture": {
                    "description": "URL of person's profile picture",
                    "type": "string",
                    "maxLength": 512
                }
            }
        },
        "PersonWritePatch": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date"
                },
                "cellPhone": {
                    "type": "string"
                },
                "cellPhoneVerified": {
                    "type": "boolean"
                },
                "deceasedDate": {
                    "type": "string",
                    "format": "date",
                    "x-nullable": true
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 255
                },
                "gender": {
                    "$ref": "#/definitions/Gender"
                },
                "homePhone": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 255
                },
                "maritalStatus": {
                    "$ref": "#/definitions/MaritalStatus"
                },
                "middleName": {
                    "type": "string",
                    "maxLength": 255
                },
                "nationalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NationalId"
                    }
                },
                "preferences": {
                    "$ref": "#/definitions/PreferencesPatch"
                },
                "profilePicture": {
                    "description": "URL of person's profile picture",
                    "type": "string",
                    "maxLength": 512
                }
            }
        },
        "Preferences": {
            "type": "object",
            "properties": {
                "contentLanguages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "$ref": "#/definitions/VisibilityPreferences"
                }
            }
        },
        "PreferencesPatch": {
            "type": "object",
            "properties": {
                "contentLanguages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visibility": {
                    "$ref": "#/definitions/VisibilityPreferencesPatch"
                }
            }
        },
        "Relation": {
            "type": "object",
            "required": [
                "grantToOrigin",
                "grantToTarget",
                "lastChangedDate",
                "originUid",
                "targetUid",
                "type",
                "uid",
                "validFrom"
            ],
            "properties": {
                "grantToOrigin": {
                    "description": "Permission of target on origin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "grantToTarget": {
                    "description": "Permission of origin on target",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "origin": {
                    "$ref": "#/definitions/Person"
                },
                "originUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "target": {
                    "$ref": "#/definitions/Person"
                },
                "targetUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "Type of the relation, defined as {origin} is {type} (of) {target}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelationType"
                        }
                    ]
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "RelationType": {
            "type": "string",
            "enum": [
                "ChildOf",
                "SpouseOf",
                "LegalDependentOf",
                "FosterChildOf",
                "ContactDependentOf"
            ]
        },
        "RelationWrite": {
            "type": "object",
            "required": [
                "grantToOrigin",
                "grantToTarget",
                "originUid",
                "targetUid",
                "type",
                "validFrom"
            ],
            "properties": {
                "grantToOrigin": {
                    "description": "Permission of target on origin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "grantToTarget": {
                    "description": "Permission of origin on target",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "originUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "targetUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "Type of the relation, defined as {origin} is {type} (of) {target}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelationType"
                        }
                    ]
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "RelationWritePatch": {
            "type": "object",
            "properties": {
                "grantToOrigin": {
                    "description": "Permission of target on origin",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "grantToTarget": {
                    "description": "Permission of origin on target",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GrantType"
                        }
                    ]
                },
                "originUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "targetUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "Type of the relation, defined as {origin} is {type} (of) {target}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelationType"
                        }
                    ]
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "Role": {
            "type": "object",
            "required": [
                "lastChangedDate",
                "uid"
            ],
            "properties": {
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string"
                },
                "scope": {
                    "$ref": "#/definitions/RoleScope"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "RoleAssignment": {
            "type": "object",
            "required": [
                "lastChangedDate",
                "personUid",
                "roleUid",
                "uid",
                "validFrom"
            ],
            "properties": {
                "lastChangedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "org": {
                    "$ref": "#/definitions/Org"
                },
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "person": {
                    "$ref": "#/definitions/Person"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "roleUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "uid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "RoleAssignmentWrite": {
            "type": "object",
            "required": [
                "personUid",
                "roleUid",
                "validFrom"
            ],
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "roleUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "RoleAssignmentWritePatch": {
            "type": "object",
            "properties": {
                "orgUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "personUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "roleUid": {
                    "type": "string",
                    "format": "uuid"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time"
                },
                "validTo": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true
                }
            }
        },
        "RoleScope": {
            "type": "string",
            "enum": [
                "Global",
                "Org"
            ]
        },
        "RoleWrite": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "scope": {
                    "$ref": "#/definitions/RoleScope"
                }
            }
        },
        "SearchVisibility": {
            "type": "string",
            "enum": [
                "Global",
                "District",
                "Hidden"
            ]
        },
        "VisibilityPreferences": {
            "type": "object",
            "required": [
                "search"
            ],
            "properties": {
                "birthdayList": {
                    "type": "boolean"
                },
                "search": {
                    "$ref": "#/definitions/SearchVisibility"
                }
            }
        },
        "VisibilityPreferencesPatch": {
            "type": "object",
            "properties": {
                "birthdayList": {
                    "type": "boolean"
                },
                "search": {
                    "$ref": "#/definitions/SearchVisibility"
                }
            }
        },
        "Wrapped-Affiliation": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Affiliation"
                }
            }
        },
        "Wrapped-Consent": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Consent"
                }
            }
        },
        "Wrapped-Country": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Country"
                }
            }
        },
        "Wrapped-Group": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Group"
                }
            }
        },
        "Wrapped-GroupMember": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/GroupMember"
                }
            }
        },
        "Wrapped-Org": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Org"
                }
            }
        },
        "Wrapped-Person": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Person"
                }
            }
        },
        "Wrapped-Relation": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Relation"
                }
            }
        },
        "Wrapped-Role": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Role"
                }
            }
        },
        "Wrapped-RoleAssignment": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/RoleAssignment"
                }
            }
        },
        "Wrapped-int": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "integer"
                }
            }
        },
        "WrappedWithMeta-array_Affiliation": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Affiliation"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Consent": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Consent"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Country": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Country"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Group": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Group"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_GroupMember": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupMember"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Org": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Org"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Person": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Person"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Relation": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Relation"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_Role": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WrappedWithMeta-array_RoleAssignment": {
            "type": "object",
            "required": [
                "data",
                "meta"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleAssignment"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        }
    },
    "securityDefinitions": {
        "ClientCredentials": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "/docs/token",
            "scopes": {
                "countries#read": " Read countries",
                "countries#write": " Write countries",
                "groups#read": " Read groups",
                "groups#write": " Write groups",
                "orgs#read": " Read orgs",
                "orgs#write": " Write orgs",
                "persons#read": " Read person data (equivalent to sum of: persons.gender#read, persons.birth_date#read, persons.deceased_date#read, persons.name#read, persons.address#read, persons.email#read, persons.phone#read, persons.national_ids#read)",
                "persons.address#read": " Read persons address",
                "persons.affiliations#read": " Read affiliations",
                "persons.affiliations#write": " Write affiliations",
                "persons.birth_date#read": " Read persons Birth date",
                "persons.consents#read": " Read consents",
                "persons.consents#write": " Write consents",
                "persons.deceased_date#read": " Read persons Deceased date",
                "persons.email#read": " Read persons email",
                "persons.gender#read": " Read persons gender",
                "persons.name#read": " Read persons name",
                "persons.national_ids#read": " Read persons nationalIDs",
                "persons.phone#read": " Read persons phone number",
                "persons.relations#read": " Read relations",
                "persons.relations#write": " Write relations",
                "persons.role_assignments#read": " Read consents",
                "persons.role_assignments#write": " Write consents",
                "roles#read": " Read consents",
                "roles#write": " Write consents"
            }
        }
    }
}