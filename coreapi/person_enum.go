// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// GenderMale is a Gender of type Male.
	GenderMale Gender = "Male"
	// GenderFemale is a Gender of type Female.
	GenderFemale Gender = "Female"
	// GenderUnknown is a Gender of type Unknown.
	GenderUnknown Gender = "Unknown"
)

var ErrInvalidGender = errors.New("not a valid Gender")

// String implements the Stringer interface.
func (x Gender) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Gender) IsValid() bool {
	_, err := ParseGender(string(x))
	return err == nil
}

var _GenderValue = map[string]Gender{
	"Male":    GenderMale,
	"Female":  GenderFemale,
	"Unknown": GenderUnknown,
}

// ParseGender attempts to convert a string to a Gender.
func ParseGender(name string) (Gender, error) {
	if x, ok := _GenderValue[name]; ok {
		return x, nil
	}
	return Gender(""), fmt.Errorf("%s is %w", name, ErrInvalidGender)
}

// MarshalText implements the text marshaller method.
func (x Gender) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Gender) UnmarshalText(text []byte) error {
	tmp, err := ParseGender(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// MaritalStatusSingle is a MaritalStatus of type Single.
	MaritalStatusSingle MaritalStatus = "Single"
	// MaritalStatusMarried is a MaritalStatus of type Married.
	MaritalStatusMarried MaritalStatus = "Married"
	// MaritalStatusWidowed is a MaritalStatus of type Widowed.
	MaritalStatusWidowed MaritalStatus = "Widowed"
	// MaritalStatusSeparated is a MaritalStatus of type Separated.
	MaritalStatusSeparated MaritalStatus = "Separated"
	// MaritalStatusSingleParent is a MaritalStatus of type SingleParent.
	MaritalStatusSingleParent MaritalStatus = "SingleParent"
	// MaritalStatusUnknown is a MaritalStatus of type Unknown.
	MaritalStatusUnknown MaritalStatus = "Unknown"
)

var ErrInvalidMaritalStatus = errors.New("not a valid MaritalStatus")

// String implements the Stringer interface.
func (x MaritalStatus) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MaritalStatus) IsValid() bool {
	_, err := ParseMaritalStatus(string(x))
	return err == nil
}

var _MaritalStatusValue = map[string]MaritalStatus{
	"Single":       MaritalStatusSingle,
	"Married":      MaritalStatusMarried,
	"Widowed":      MaritalStatusWidowed,
	"Separated":    MaritalStatusSeparated,
	"SingleParent": MaritalStatusSingleParent,
	"Unknown":      MaritalStatusUnknown,
}

// ParseMaritalStatus attempts to convert a string to a MaritalStatus.
func ParseMaritalStatus(name string) (MaritalStatus, error) {
	if x, ok := _MaritalStatusValue[name]; ok {
		return x, nil
	}
	return MaritalStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidMaritalStatus)
}

// MarshalText implements the text marshaller method.
func (x MaritalStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MaritalStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseMaritalStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// PersonRelationTypeChild is a PersonRelationType of type Child.
	PersonRelationTypeChild PersonRelationType = "Child"
	// PersonRelationTypeParent is a PersonRelationType of type Parent.
	PersonRelationTypeParent PersonRelationType = "Parent"
	// PersonRelationTypeSpouse is a PersonRelationType of type Spouse.
	PersonRelationTypeSpouse PersonRelationType = "Spouse"
	// PersonRelationTypeLegalDependent is a PersonRelationType of type LegalDependent.
	PersonRelationTypeLegalDependent PersonRelationType = "LegalDependent"
	// PersonRelationTypeLegalGuardian is a PersonRelationType of type LegalGuardian.
	PersonRelationTypeLegalGuardian PersonRelationType = "LegalGuardian"
	// PersonRelationTypeFosterChild is a PersonRelationType of type FosterChild.
	PersonRelationTypeFosterChild PersonRelationType = "FosterChild"
	// PersonRelationTypeFosterParent is a PersonRelationType of type FosterParent.
	PersonRelationTypeFosterParent PersonRelationType = "FosterParent"
	// PersonRelationTypeContactDependent is a PersonRelationType of type ContactDependent.
	PersonRelationTypeContactDependent PersonRelationType = "ContactDependent"
	// PersonRelationTypeContactPerson is a PersonRelationType of type ContactPerson.
	PersonRelationTypeContactPerson PersonRelationType = "ContactPerson"
)

var ErrInvalidPersonRelationType = errors.New("not a valid PersonRelationType")

// String implements the Stringer interface.
func (x PersonRelationType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x PersonRelationType) IsValid() bool {
	_, err := ParsePersonRelationType(string(x))
	return err == nil
}

var _PersonRelationTypeValue = map[string]PersonRelationType{
	"Child":            PersonRelationTypeChild,
	"Parent":           PersonRelationTypeParent,
	"Spouse":           PersonRelationTypeSpouse,
	"LegalDependent":   PersonRelationTypeLegalDependent,
	"LegalGuardian":    PersonRelationTypeLegalGuardian,
	"FosterChild":      PersonRelationTypeFosterChild,
	"FosterParent":     PersonRelationTypeFosterParent,
	"ContactDependent": PersonRelationTypeContactDependent,
	"ContactPerson":    PersonRelationTypeContactPerson,
}

// ParsePersonRelationType attempts to convert a string to a PersonRelationType.
func ParsePersonRelationType(name string) (PersonRelationType, error) {
	if x, ok := _PersonRelationTypeValue[name]; ok {
		return x, nil
	}
	return PersonRelationType(""), fmt.Errorf("%s is %w", name, ErrInvalidPersonRelationType)
}

// MarshalText implements the text marshaller method.
func (x PersonRelationType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PersonRelationType) UnmarshalText(text []byte) error {
	tmp, err := ParsePersonRelationType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SearchVisibilityGlobal is a SearchVisibility of type Global.
	SearchVisibilityGlobal SearchVisibility = "Global"
	// SearchVisibilityDistrict is a SearchVisibility of type District.
	SearchVisibilityDistrict SearchVisibility = "District"
	// SearchVisibilityHidden is a SearchVisibility of type Hidden.
	SearchVisibilityHidden SearchVisibility = "Hidden"
)

var ErrInvalidSearchVisibility = errors.New("not a valid SearchVisibility")

// String implements the Stringer interface.
func (x SearchVisibility) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x SearchVisibility) IsValid() bool {
	_, err := ParseSearchVisibility(string(x))
	return err == nil
}

var _SearchVisibilityValue = map[string]SearchVisibility{
	"Global":   SearchVisibilityGlobal,
	"District": SearchVisibilityDistrict,
	"Hidden":   SearchVisibilityHidden,
}

// ParseSearchVisibility attempts to convert a string to a SearchVisibility.
func ParseSearchVisibility(name string) (SearchVisibility, error) {
	if x, ok := _SearchVisibilityValue[name]; ok {
		return x, nil
	}
	return SearchVisibility(""), fmt.Errorf("%s is %w", name, ErrInvalidSearchVisibility)
}

// MarshalText implements the text marshaller method.
func (x SearchVisibility) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SearchVisibility) UnmarshalText(text []byte) error {
	tmp, err := ParseSearchVisibility(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
