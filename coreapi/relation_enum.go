// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// GrantDefault is a Grant of type Default.
	GrantDefault Grant = "Default"
	// GrantView is a Grant of type View.
	GrantView Grant = "View"
	// GrantAdministrate is a Grant of type Administrate.
	GrantAdministrate Grant = "Administrate"
	// GrantRepresent is a Grant of type Represent.
	GrantRepresent Grant = "Represent"
	// GrantNone is a Grant of type None.
	GrantNone Grant = "None"
)

var ErrInvalidGrant = errors.New("not a valid Grant")

// String implements the Stringer interface.
func (x Grant) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Grant) IsValid() bool {
	_, err := ParseGrant(string(x))
	return err == nil
}

var _GrantValue = map[string]Grant{
	"Default":      GrantDefault,
	"View":         GrantView,
	"Administrate": GrantAdministrate,
	"Represent":    GrantRepresent,
	"None":         GrantNone,
}

// ParseGrant attempts to convert a string to a Grant.
func ParseGrant(name string) (Grant, error) {
	if x, ok := _GrantValue[name]; ok {
		return x, nil
	}
	return Grant(""), fmt.Errorf("%s is %w", name, ErrInvalidGrant)
}

// MarshalText implements the text marshaller method.
func (x Grant) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Grant) UnmarshalText(text []byte) error {
	tmp, err := ParseGrant(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// RelationTypeChildOf is a RelationType of type ChildOf.
	RelationTypeChildOf RelationType = "ChildOf"
	// RelationTypeSpouseOf is a RelationType of type SpouseOf.
	RelationTypeSpouseOf RelationType = "SpouseOf"
	// RelationTypeLegalDependentOf is a RelationType of type LegalDependentOf.
	RelationTypeLegalDependentOf RelationType = "LegalDependentOf"
	// RelationTypeFosterChildOf is a RelationType of type FosterChildOf.
	RelationTypeFosterChildOf RelationType = "FosterChildOf"
	// RelationTypeContactDependentOf is a RelationType of type ContactDependentOf.
	RelationTypeContactDependentOf RelationType = "ContactDependentOf"
)

var ErrInvalidRelationType = errors.New("not a valid RelationType")

// String implements the Stringer interface.
func (x RelationType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x RelationType) IsValid() bool {
	_, err := ParseRelationType(string(x))
	return err == nil
}

var _RelationTypeValue = map[string]RelationType{
	"ChildOf":            RelationTypeChildOf,
	"SpouseOf":           RelationTypeSpouseOf,
	"LegalDependentOf":   RelationTypeLegalDependentOf,
	"FosterChildOf":      RelationTypeFosterChildOf,
	"ContactDependentOf": RelationTypeContactDependentOf,
}

// ParseRelationType attempts to convert a string to a RelationType.
func ParseRelationType(name string) (RelationType, error) {
	if x, ok := _RelationTypeValue[name]; ok {
		return x, nil
	}
	return RelationType(""), fmt.Errorf("%s is %w", name, ErrInvalidRelationType)
}

// MarshalText implements the text marshaller method.
func (x RelationType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RelationType) UnmarshalText(text []byte) error {
	tmp, err := ParseRelationType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
