// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// RoleScopeGlobal is a RoleScope of type Global.
	RoleScopeGlobal RoleScope = "Global"
	// RoleScopeOrg is a RoleScope of type Org.
	RoleScopeOrg RoleScope = "Org"
)

var ErrInvalidRoleScope = errors.New("not a valid RoleScope")

// String implements the Stringer interface.
func (x RoleScope) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x RoleScope) IsValid() bool {
	_, err := ParseRoleScope(string(x))
	return err == nil
}

var _RoleScopeValue = map[string]RoleScope{
	"Global": RoleScopeGlobal,
	"Org":    RoleScopeOrg,
}

// ParseRoleScope attempts to convert a string to a RoleScope.
func ParseRoleScope(name string) (RoleScope, error) {
	if x, ok := _RoleScopeValue[name]; ok {
		return x, nil
	}
	return RoleScope(""), fmt.Errorf("%s is %w", name, ErrInvalidRoleScope)
}

// MarshalText implements the text marshaller method.
func (x RoleScope) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RoleScope) UnmarshalText(text []byte) error {
	tmp, err := ParseRoleScope(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
