// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// AffiliationTypeMember is a AffiliationType of type Member.
	AffiliationTypeMember AffiliationType = "Member"
	// AffiliationTypeAffiliate is a AffiliationType of type Affiliate.
	AffiliationTypeAffiliate AffiliationType = "Affiliate"
	// AffiliationTypeParticipant is a AffiliationType of type Participant.
	AffiliationTypeParticipant AffiliationType = "Participant"
)

var ErrInvalidAffiliationType = errors.New("not a valid AffiliationType")

// String implements the Stringer interface.
func (x AffiliationType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x AffiliationType) IsValid() bool {
	_, err := ParseAffiliationType(string(x))
	return err == nil
}

var _AffiliationTypeValue = map[string]AffiliationType{
	"Member":      AffiliationTypeMember,
	"Affiliate":   AffiliationTypeAffiliate,
	"Participant": AffiliationTypeParticipant,
}

// ParseAffiliationType attempts to convert a string to a AffiliationType.
func ParseAffiliationType(name string) (AffiliationType, error) {
	if x, ok := _AffiliationTypeValue[name]; ok {
		return x, nil
	}
	return AffiliationType(""), fmt.Errorf("%s is %w", name, ErrInvalidAffiliationType)
}

// MarshalText implements the text marshaller method.
func (x AffiliationType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AffiliationType) UnmarshalText(text []byte) error {
	tmp, err := ParseAffiliationType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
