// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// OrgActiveStatusActive is a OrgActiveStatus of type Active.
	OrgActiveStatusActive OrgActiveStatus = "Active"
	// OrgActiveStatusInactive is a OrgActiveStatus of type Inactive.
	OrgActiveStatusInactive OrgActiveStatus = "Inactive"
)

var ErrInvalidOrgActiveStatus = errors.New("not a valid OrgActiveStatus")

// String implements the Stringer interface.
func (x OrgActiveStatus) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x OrgActiveStatus) IsValid() bool {
	_, err := ParseOrgActiveStatus(string(x))
	return err == nil
}

var _OrgActiveStatusValue = map[string]OrgActiveStatus{
	"Active":   OrgActiveStatusActive,
	"Inactive": OrgActiveStatusInactive,
}

// ParseOrgActiveStatus attempts to convert a string to a OrgActiveStatus.
func ParseOrgActiveStatus(name string) (OrgActiveStatus, error) {
	if x, ok := _OrgActiveStatusValue[name]; ok {
		return x, nil
	}
	return OrgActiveStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidOrgActiveStatus)
}

// MarshalText implements the text marshaller method.
func (x OrgActiveStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrgActiveStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseOrgActiveStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// OrgTypeChurch is a OrgType of type Church.
	OrgTypeChurch OrgType = "Church"
	// OrgTypeClub is a OrgType of type Club.
	OrgTypeClub OrgType = "Club"
	// OrgTypeOrg is a OrgType of type Org.
	OrgTypeOrg OrgType = "Org"
)

var ErrInvalidOrgType = errors.New("not a valid OrgType")

// String implements the Stringer interface.
func (x OrgType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x OrgType) IsValid() bool {
	_, err := ParseOrgType(string(x))
	return err == nil
}

var _OrgTypeValue = map[string]OrgType{
	"Church": OrgTypeChurch,
	"Club":   OrgTypeClub,
	"Org":    OrgTypeOrg,
}

// ParseOrgType attempts to convert a string to a OrgType.
func ParseOrgType(name string) (OrgType, error) {
	if x, ok := _OrgTypeValue[name]; ok {
		return x, nil
	}
	return OrgType(""), fmt.Errorf("%s is %w", name, ErrInvalidOrgType)
}

// MarshalText implements the text marshaller method.
func (x OrgType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrgType) UnmarshalText(text []byte) error {
	tmp, err := ParseOrgType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
