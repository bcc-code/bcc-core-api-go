// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// ConsentPurposeDataSharing is a ConsentPurpose of type DataSharing.
	ConsentPurposeDataSharing ConsentPurpose = "DataSharing"
	// ConsentPurposeTracking is a ConsentPurpose of type Tracking.
	ConsentPurposeTracking ConsentPurpose = "Tracking"
)

var ErrInvalidConsentPurpose = errors.New("not a valid ConsentPurpose")

// String implements the Stringer interface.
func (x ConsentPurpose) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x ConsentPurpose) IsValid() bool {
	_, err := ParseConsentPurpose(string(x))
	return err == nil
}

var _ConsentPurposeValue = map[string]ConsentPurpose{
	"DataSharing": ConsentPurposeDataSharing,
	"Tracking":    ConsentPurposeTracking,
}

// ParseConsentPurpose attempts to convert a string to a ConsentPurpose.
func ParseConsentPurpose(name string) (ConsentPurpose, error) {
	if x, ok := _ConsentPurposeValue[name]; ok {
		return x, nil
	}
	return ConsentPurpose(""), fmt.Errorf("%s is %w", name, ErrInvalidConsentPurpose)
}

// MarshalText implements the text marshaller method.
func (x ConsentPurpose) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ConsentPurpose) UnmarshalText(text []byte) error {
	tmp, err := ParseConsentPurpose(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
