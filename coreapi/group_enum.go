// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package coreapi

import (
	"errors"
	"fmt"
)

const (
	// GroupTypeStatic is a GroupType of type Static.
	GroupTypeStatic GroupType = "Static"
	// GroupTypeDynamic is a GroupType of type Dynamic.
	GroupTypeDynamic GroupType = "Dynamic"
)

var ErrInvalidGroupType = errors.New("not a valid GroupType")

// String implements the Stringer interface.
func (x GroupType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x GroupType) IsValid() bool {
	_, err := ParseGroupType(string(x))
	return err == nil
}

var _GroupTypeValue = map[string]GroupType{
	"Static":  GroupTypeStatic,
	"Dynamic": GroupTypeDynamic,
}

// ParseGroupType attempts to convert a string to a GroupType.
func ParseGroupType(name string) (GroupType, error) {
	if x, ok := _GroupTypeValue[name]; ok {
		return x, nil
	}
	return GroupType(""), fmt.Errorf("%s is %w", name, ErrInvalidGroupType)
}

// MarshalText implements the text marshaller method.
func (x GroupType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *GroupType) UnmarshalText(text []byte) error {
	tmp, err := ParseGroupType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
